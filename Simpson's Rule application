//(Simpson's Rule). For each integral below, determine an appropriate number n of subintervals such that the error in Simpson's Rule |S_{n}-∫_{a}^{b}f(x)dx|<10⁻⁸. 
//(Note: For #3, no such n can be found; use n=500.)
//Use the formula |S_{n}-∫_{a}^{b}f(x)dx|≤((K(b-a)⁵)/(180n⁴)), where K is a bound on |f⁽⁴⁾(x)| on [a,b]. 
//for each integral, input the value of n that you computed. 
//Run the program for
1.∫₀²x⁴dx
2. ∫₁⁴(x+(1/x))dx
3. ∫₋₁¹2√(1-x²)dx 
4. ∫₀¹(1/(x²+1))dx 


#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <iomanip>
#include <math.h>
using namespace std;
int main(void)
{ 
double upper; 
double lower; 
double intervals; 
double sum; 
int a,f; 
double b, c, d, e; 
char zzz; 
double h; 
const char filepath[] = "C:\\CoutputFiles\\Project 7 homework.txt"; 
const char ErrorMessage[] = "Can't open file "; 
fstream OutStream(filepath, ios::out); 
if (OutStream.fail()) 
{ 
cerr << ErrorMessage << filepath; 
cin >> zzz; 
exit(-1); 
} 
do 
{ 
cout << "which funtion are you calculating? Please input 1,2,3,4" << "\n\n"; 
cin >> a; 
cout << "Please input your upper limit of your integral" << "\n\n"; 
cin >> upper; 
cout << "Please input your lower limit of your integral" << "\n\n"; 
cin >> lower; 
cout << "please input intervals you want to use in your integral" << "\n\n"; 
cin >> intervals; 
switch (a) 
{ 
case 1: 
sum = 0; 
b = lower; 
h = ((upper - lower) / intervals); 
for (int i = 1; i < intervals; i++) 
{ 
if ((i == 1) || (i == intervals)) 
sum += pow(b, 4); 
else 
if ((i % 2) == 0) 
sum += 4 * (pow(b, 4)); 
else 
sum += 2 * (pow(b, 4)); 
b += h; 
} 
sum *= (h / 3); 
cout << "The appoximate value of the first integral using Simpson's rule is " << sum << "\n\n"; OutStream << "The appoximate value of the first integral using Simpson's rule is " << sum << "\n\n"; break; 
case(2) : 
sum = 0; 
c = lower; 
h = ((upper - lower) / intervals); 
for (int i = 1; i < intervals; i++) 
{ 
if ((i == 1) || (i == intervals)) 
sum += (c + 1 / c); 
else 
if ((i % 2) == 0) 
sum += 4 * (c + 1 / c); 
else 
sum += 2 * (c + 1 / c); 
c += h; 
} 
sum *= (h / 3); 
cout << "The appoximate value of the second integral using Simpson's rule is " << sum << "\n\n"; OutStream << "The appoximate value of the second integral using Simpson's rule is " << sum << "\n\n"; break; 
case (3) : 
sum = 0; 
d = lower; 
h = ((upper - lower) / intervals); 
for (int i = 1; i < intervals; i++) 
{ 
if ((i == 1) || (i == intervals)) 
sum += (2 * sqrt(1 - d*d)); 
else 
if ((i % 2) == 0) 
sum += 4 * (2 * sqrt(1 - d*d)); 
else 
sum += 2 * (2 * sqrt(1 - d*d)); 
d += h; 
} 
sum *= (h / 3); 
cout << "The appoximate value of the third integral using Simpson's rule is " << sum << "\n\n"; 、OutStream << "The appoximate value of the third integral using Simpson's rule is " << sum << "\n\n"; break; 
case (4) : 
sum = 0; 
e = lower; 
h = ((upper - lower) / intervals); 
for (int i = 1; i < intervals; i++) 
{ 
if ((i == 1) || (i == intervals)) 
sum += ((1 / (e*e + 1))); 
else 
if ((i % 2) == 0) 
sum += 4 * ((1 / (e*e + 1))); 
else 
sum += 2 * ((1 / (e*e + 1))); 
e += h; 
} 
sum *= (h / 3); 
cout << "The appoximate value of the forth integral using Simpson's rule is " << sum << "\n\n"; OutStream << "The appoximate value of the forth integral using Simpson's rule is " << sum << "\n\n"; break; 
default: 
cout << "You did not enter a number which is included in 1,2,3,4" << "\n\n"; 
}; 
cout << "Do you wish to calculate another integral? enter 1 if you want to continue, if you do not want to continue, enter another integer. If you enter some non-numeric character, the program will never stop" << "\n\n"; 
cin >> f; 
} while (f == 1); 
OutStream.close(); 
cout << "The information has been written to your file, type a character when done. \n\n"; 
cin >> zzz; 
return (0); }

